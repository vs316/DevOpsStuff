#!/bin/bash

# Prompt the user to enter a command
read -p "Enter a command: " user_command

# Execute the user command, capture the output, and timestamp
command_output=$(eval "$user_command" 2>&1)
timestamp=$(date +"%Y-%m-%d %H:%M:%S")

# Display the command output with timestamp
echo "[$timestamp] Command Output:"
echo "$command_output"

Create a script that redirects the output of a command to
a file. Allow the user to specify the filename as an
argument. Ensure the script checks for existing files and
prompts the user for confirmation before overwriting.

Here's a Bash script that redirects the output of a command to a file specified by the user. It checks for existing files and prompts the user for confirmation before overwriting:

```bash
#!/bin/bash

# Check if filename argument is provided
if [ $# -ne 1 ]; then
    echo "Usage: $0 <filename>"
    exit 1
fi

# Assign the filename provided by the user
filename=$1

# Check if the file already exists
if [ -e "$filename" ]; then
    # Ask for confirmation before overwriting
    read -p "File '$filename' already exists. Do you want to overwrite it? (y/n): " confirm
    if [ "$confirm" != "y" ]; then
        echo "File not overwritten. Exiting."
        exit 0
    fi
fi

# Run the command and redirect the output to the specified file
# Example command: ls -l
# Replace 'ls -l' with any command you want to execute
# If you want the user to input the command, you can use 'read -p "Enter command: " user_command' instead
echo "Running command..."
command_output=$(ls -l)  # Replace 'ls -l' with the command provided by the user
echo "$command_output" > "$filename"

echo "Command output has been redirected to '$filename'."
```

Save the above script in a file, for example, `redirect_output.sh`. Then, make the script executable by running:
```bash
chmod +x redirect_output.sh
```

To run the script and redirect the output of a command to a file, execute:
```bash
./redirect_output.sh output.txt
```

Replace `output.txt` with the filename you want to use and replace `ls -l` with the command whose output you want to redirect. The script will check if the specified file already exists and prompt you for confirmation before overwriting it.

#!/bin/bash

# Get the current hour using the date command
hour=$(date +%H)

# Determine the time of day based on the current hour
if [ "$hour" -ge 5 ] && [ "$hour" -lt 12 ]; then
    time_of_day="morning"
elif [ "$hour" -ge 12 ] && [ "$hour" -lt 18 ]; then
    time_of_day="afternoon"
else
    time_of_day="evening"
fi

# Echo a custom welcome message based on the time of day
echo "Good $time_of_day! Welcome to our system."

#!/bin/bash

# Prompt the user for their name
read -p "Enter your name: " name

# Prompt the user for their age
read -p "Enter your age: " age

# Get the current year
current_year=$(date +"%Y")

# Calculate the birth year based on the age provided
birth_year=$((current_year - age))

# Generate a personalized greeting
echo "Hello, $name! You are $age years old. Your birth year is $birth_year."


#!/bin/bash

# Prompt the user for the pattern to search
read -p "Enter the pattern to search for: " pattern

# Prompt the user for the file name
read -p "Enter the file name to search in: " filename

# Check if the file exists
if [ ! -f "$filename" ]; then
    echo "File '$filename' not found."
    exit 1
fi

# Use grep to search for the pattern in the file and display matching lines along with line numbers
matching_lines=$(grep -n "$pattern" "$filename")

# Check if any matching lines were found
if [ -z "$matching_lines" ]; then
    echo "No matching lines found."
else
    echo "Matching lines in '$filename':"
    echo "$matching_lines"
fi

#!/bin/bash

# Prompt the user for the input file
read -p "Enter the CSV file name: " input_file

# Check if the file exists
if [ ! -f "$input_file" ]; then
    echo "File '$input_file' not found."
    exit 1
fi

# Prompt the user for the column numbers to extract
read -p "Enter the column numbers to extract (comma-separated): " column_numbers

# Convert the comma-separated list of column numbers into an array
IFS=',' read -r -a column_array <<< "$column_numbers"

# Read each line of the CSV file, extract the specified columns, and display them
while IFS=',' read -r line; do
    columns=""
    for index in "${column_array[@]}"; do
        columns+=$(echo "$line" | awk -F ',' -v i="$index" '{print $i}')
        columns+=","
    done
    echo "${columns%,}"  # Remove trailing comma and display extracted columns
done < "$input_file"

sample.csv
Name,Age,City
John,30,New York
Alice,25,Los Angeles
Bob,35,Chicago

#!/bin/bash

# Prompt the user to enter a number
read -p "Enter a number: " number

# Check if the input is a valid number
if ! [[ "$number" =~ ^[0-9]+$ ]]; then
    echo "Error: '$number' is not a valid number."
    exit 1
fi

# Check if the number is even or odd and provide feedback
if (( number % 2 == 0 )); then
    echo "$number is an even number."
else
    echo "$number is an odd number."
fi

#!/bin/bash

# Prompt the user for the command
read -p "Enter the command to be executed: " user_command

# Prompt the user for the time at which the command should be executed
read -p "Enter the time at which the command should be executed (HH:MM format): " execution_time

# Validate the time format
if ! [[ "$execution_time" =~ ^[0-9]{2}:[0-9]{2}$ ]]; then
    echo "Error: Invalid time format. Please use HH:MM format."
    exit 1
fi

# Schedule the command to run at the specified time using the 'at' command
echo "$user_command" | at "$execution_time" 2>/dev/null

# Check if scheduling the task was successful
if [ $? -eq 0 ]; then
    echo "Command scheduled to run at $execution_time."
else
    echo "Error: Failed to schedule command."
fi


#!/bin/bash

# Prompt the user to enter the first number
read -p "Enter the first number: " num1

# Prompt the user to enter the second number
read -p "Enter the second number: " num2

# Perform arithmetic operations
sum=$((num1 + num2))
difference=$((num1 - num2))
product=$((num1 * num2))

# Check if the second number is not zero before performing division
if [ "$num2" -ne 0 ]; then
    division=$(bc <<< "scale=2; $num1 / $num2")
else
    division="Undefined (division by zero)"
fi

# Display the results with appropriate formatting
echo "Results:"
echo "  Sum: $num1 + $num2 = $sum"
echo "  Difference: $num1 - $num2 = $difference"
echo "  Product: $num1 * $num2 = $product"
echo "  Division: $num1 / $num2 = $division"

#!/bin/bash

# Prompt the user to enter their age
read -p "Enter your age: " age

# Check the age range and provide appropriate messages
if (( age < 0 )); then
    echo "Error: Age cannot be negative."
elif (( age >= 0 && age <= 12 )); then
    echo "You are a child."
elif (( age >= 13 && age <= 19 )); then
    echo "You are a teenager."
elif (( age >= 20 && age <= 64 )); then
    echo "You are an adult."
else
    echo "You are a senior citizen."
fi

